---
version: 2.1
jobs:
  checkout:
    executor: python/default
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .
  updatePoetryLock:
    executor: python/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upate Poetry lock file with new dependencies
          command: |
            poetry update
      - persist_to_workspace:
            root: .
            paths:
                - .
  build:
    executor: python/default
    steps:
      - attach_workspace:
          at: .
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
              ./cc-test-reporter before-build
      - run:
          command: |
            mkdir test-results
            poetry run coverage run -m pytest --junitxml=test-results/junit.xml
          name: Test it
      - store_test_results:
          path: test-results
      - run:
          name: Upload coverage to code climate
          command: |
            poetry run coverage xml
            ./cc-test-reporter after-build
      - persist_to_workspace:
            root: .
            paths:
                - .
  commitChanges:
    executor: python/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Push changes back to branch
          command: |
              if ! git diff --exit-code; then
                 mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
                 git config user.email "automation@circleci.com"
                 git config user.name "CirleCI Automation"
                 git add poetry.lock
                 git commit -m "Updated poetry.lock to reflect new dependency versions"
                 git push origin ${CIRCLE_BRANCH}
              fi
  bumpVersion:
    executor: python/default
    steps:
      - attach_workspace:
            at: .
      - run:
          name: Update version number
          command: |
              poetry -V
              poetry version patch --no-interaction
              git config user.email "automation@circleci.com"
              git config user.name  "CirleCI Automation"
              git add pyproject.yaml
              git commit -m "[ci skip] Updated version number to ${poetry verion -s}"
              git tag ${poetry version -s}
              git push origin ${poetry version -s}
              git push origin master
  publishRelease:
    executor: python/default
    steps:
        - attach_workspace:
              at: .
        - run:
            name: Push release to pypi
            command: |
                poetry publish --build --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction


orbs:
  python: circleci/python@1.2.1
workflows:
  version: 2
  updateDeps:
    jobs:
      - checkout:
          filters:
            branches:
              only: /^dependabot.*/
      - updatePoetryLock:
          requires:
            - checkout
      - build:
          requires:
            - updatePoetryLock
      - commitChanges:
          requires:
            - build
  main:
    jobs:
      - checkout:
          filters:
            branches:
              ignore:
                - /^dependabot.*/
                - master
      - build:
          requires:
            - checkout
  bumpVersion:
    jobs:
      - checkout:
          filters:
            branches:
              only: master
      - bumpVersion:
          requires:
            - checkout
      - build:
          requires:
            - bumpVersion
      - publishRelease:
          requires:
            - build
